class LRUCache {
public:
    LRUCache(int capacity)
    {
        Capacity = capacity;
    }
    
    int get(int key) {
        const auto it = m.find(key);
        if(it==m.cend()) return -1;
        //把節點移到最前面
        Cache.splice(Cache.begin(),Cache,it->second);
        return it->second->second;
    }
    
    void put(int key, int value) 
    {
        const auto it = m.find(key);
        if(it!=m.cend())
        {
            it->second->second = value;//update
            Cache.splice(Cache.begin(),Cache,it->second);
            return;
        }
        //not found
        if(Cache.size()==Capacity)
        {
            const auto &node = Cache.back();//
            m.erase(node.first);
            Cache.pop_back();
        }
        Cache.emplace_front(key,value);
        m[key] = Cache.begin();
    }
private:
    int Capacity;
    list<pair<int,int>>Cache;//key,value
    map< int , list<pair<int,int>>::iterator > m; //key,指針
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);

這題的大致思路就是用一個hash表來保存已經存在的key, 
然後用另外一個線性容器來存儲其key-value值, 
我們可以選擇鍊錶list, 因為需要調整結點的位置,


如果新來一個put請求, 我們先去查hash表


1. 如果已經存在了這個key, 那麼我們需要更新其value, 
然後將其在list的結點位置移動到鍊錶首部.


2. 如果不存在這個key, 那麼我們需要在hash表和鍊錶中都添加這個值,
並且如果添加之後鍊錶長度超過最大長度, 我們需要將鍊錶尾部的節點刪除, 並且刪除其在hash表中的記錄


如果來了一個get請求, 我們仍然先去查hash表, 如果key存在hash表中, 
那麼需要將這個結點在鍊錶的中的位置移動到鍊錶首部.否則返回-1.


另外一個非常關鍵的降低時間複雜度的方法是在hash中保存
那個key在鍊錶中對應的指針, 在hash表中存儲那個key在鍊錶中結點的指針, 這樣就可以在O(1)的時間內移動結點到鍊錶首部
 */