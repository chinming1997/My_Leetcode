class Solution {
public:
    string removeKdigits(string num, int k) 
    {
        if(k>=num.size()) return "0";
        stack<char>st;
        string f = "";
        for(int i = 0 ; i<num.size() ; i++)
        {
            while(k && !st.empty() && st.top() > num[i]) // stack內保持升序(頂端>num[i]就刪除)
            {
                k--;
                st.pop();
            }
            st.push(num[i]);
        }
        while(k--)
        {
            st.pop();//前面已是最小排序
        }
        while(!st.empty())
        {
         f += st.top(); //將結果存到字串f
         st.pop();
      }
        reverse(f.begin(), f.end());//因最後加入的在stack的頂端
        
        int j = 0;
        string ans = "";
        
        while(j < f.size() && f[j] == '0')j++; //去掉leading zero
        while(j <f.size())
        {
            ans+=f[j++];
        }
        return ans.size() == 0? "0" : ans ; //考慮把0刪光的情形
    }
};